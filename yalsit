#!/bin/bash
# This is used to generate system information such as: Model/Serial 
# Number, Software Version, Hardware (CPU, GPU, Memory, Disks), 
# Networking information, Current WiFi/Internet status, 
# GeoLocation, etc.
#
# Prerequisites: Linux using systemd
#
# Copyright (C) 2021-2022 Joseph Zikusooka.
#
# Find me on twitter @jzikusooka or email josephzik AT gmail.com
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Variables
CURL_CMD="$(which curl)"
CURL_OPTS="-s -S -L -m 60 -k"
HTTP_USER_AGENT="Mozilla/5.0 (X11; Linux x86_64; rv:54.0) Gecko/20100101 Firefox/54.0"
PING_COUNT=1 
PING_TIMEOUT=2
GOOGLE_DNS_SERVER_IP_1=8.8.4.4
LINUX_KERNEL_VERSION=$(uname -r | head -1)
PRODUCT_MODEL_NUMBER=$(dmidecode -t baseboard | awk -F': ' '/Manufacturer/ {print $2}')
PRODUCT_SERIAL_NUMBER=$(dmidecode -t baseboard | awk -F': ' '/Serial Number/ {print $2}')


set_fonts_colors () {
if tty -s
then
BOLD=$(tput bold)
BLINK=$(tput blink)
RST=$(tput sgr0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
PURPLE=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
fi
}

notice_gathering_info () {
clear
cat <<ET
Gathering system information, please wait ...
ET
}

check_if_internet_is_up () {
ping -c $PING_COUNT -W $PING_TIMEOUT $GOOGLE_DNS_SERVER_IP_1 > /dev/null 2>&1
INTERNET_ALIVE=$?
}

check_for_updates () {
# See if update is available
$MONITORING_PLUGINS_DIR/check_updates > /dev/null 2>&1
UPDATE_STATUS=$?
	if [ "$UPDATE_STATUS" = "0" ];
	then
	UPDATES_AVAILABLE="${GREEN}Up to Date!${RST}"
	else
	UPDATES_AVAILABLE="${BLINK}Old version!${RST}"
	fi
}

internet_service_checks () {
# Check Internet connectivity
check_if_internet_is_up

if [ "$INTERNET_ALIVE" = "0" ];
then
# Status - UP
INTERNET_STATE="${GREEN}UP↑${RST}"

# Public IP Address
PUBLIC_IP_ADDRESS=$($CURL_CMD $CURL_OPTS --get -S -m 60  -A "$DEFAULT_USER_AGENT" https://api.ipify.org)

# Check for software updates
check_for_updates

else
# Status - DOWN
INTERNET_STATE="${RED}DOWN↓${RST}"

# Public IP Address
PUBLIC_IP_ADDRESS="${RED}Unknown${RST}"

# Temperature
TEMPERATURE_C=0

# City
CITY=$([ -e /etc/timezone ] && cat /etc/timezone | cut -d / -f2)

# Summary
SUMMARY="Info not available"

# No Updates
UPDATES_AVAILABLE="${RED}?${RST}"
fi
}

wired_network () {
NETWORK_ETHERNET_DEVICE=$(/usr/sbin/ip link | grep '2: ' | cut -d : -f2 | head -1 | sed -e 's/ //g')
NETWORK_IP_ADDRESS=$(/usr/sbin/ip -4 addr show dev $NETWORK_ETHERNET_DEVICE | grep brd | awk {'print $2'} | cut -d / -f1)
NETWORK_GATEWAY_ADDRESS=$(/usr/sbin/ip route show | awk '$3 ~ /^[1-9]+/ {print $3}')
NETWORK_WIRED_PREFIX=24
NETWORK_WIRED_MASK=$(echo $NETWORK_IP_ADDRESS | cut -d '.' -f1-3).0/$NETWORK_WIRED_PREFIX
CURRENT_DNS1=`sed '/127.0.0.1/d' /etc/resolv.conf | sed 's/^nameserver //g' | sed '/^[a-z]/d' | sed '/^[A-Z]/d' | sed '/^#/d' | sed '/ /d' | uniq | awk 'NR == 1'`
}

wifi_hardware () {
# Access Point
IEEE_OUI_COMPANY_ID_AP=$(/usr/sbin/iw dev | grep -B2 -i 'type AP' | grep addr | awk {'print $2'} | cut -d ':' -f1-3 | sed 's/://g' | head -1) 
if [[ "x$IEEE_OUI_COMPANY_ID_AP" != "x" ]];
then
WIFI_AP_CHIPSET=
#WIFI_AP_CHIPSET=$(grep -i "$IEEE_OUI_COMPANY_ID_AP" $IEEE_OUI_HWDATA_FILE | awk {'print $4FS$5FS$6FS$7'})
else
WIFI_AP_CHIPSET="${RED}No Access Point found${RST}"
fi
#
# Station
IEEE_OUI_COMPANY_ID_ST=$(/usr/sbin/iw dev | grep -i -B2 'type managed' | grep addr | awk {'print $2'} | cut -d ':' -f1-3 | sed 's/://g' | head -1) 
if [[ "x$IEEE_OUI_COMPANY_ID_ST" != "x" ]];
then
WIFI_CLIENT_CHIPSET=
#WIFI_CLIENT_CHIPSET=$(grep -i "$IEEE_OUI_COMPANY_ID_ST" $IEEE_OUI_HWDATA_FILE | awk {'print $4FS$5'})
else
WIFI_CLIENT_CHIPSET="${RED}No Client found${RST}"
fi
}

wifi_status () {
WIFI_STATION_INTERFACE=$(iw dev | awk '/Interface/ {print $2}')
WIFI_STATUS=$([[ -e /sys/class/net/${WIFI_STATION_INTERFACE}/operstate ]] && cat /sys/class/net/${WIFI_STATION_INTERFACE}/operstate)
if [[ "$WIFI_STATUS" = "up" ]];
then
WIFI_CONNECTION_STATUS="${GREEN}Connected${RST}"
else
WIFI_CONNECTION_STATUS="${RED}Not Connected${RST}"
fi
}

get_geolocation () {
ISP=$($CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" http://ip-api.com/json | jq -r ".isp")
CITY=$($CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" http://ip-api.com/json | jq -r ".city")
COUNTRY=$($CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" http://ip-api.com/json | jq -r ".country")
LATITUDE=$($CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" http://ip-api.com/json | jq -r ".lat")
LONGITUDE=$($CURL_CMD $CURL_OPTS -A "$HTTP_USER_AGENT" http://ip-api.com/json | jq -r ".lon") 
GEOLOCATION="$CITY, $COUNTRY ($LATITUDE,$LONGITUDE)"
}

install_setup_info () {
# Date
INSTALL_DATE=$([[ -e /lost+found ]] && ls -dlct --time-style="+%d %B %Y" "/lost+found" | awk '{printf $9 " " $6 " "$7 " " $8}' | sed 's:/lost+found ::g')

# Owner
CONTACT_NAME=$(grep :/home /etc/passwd | awk -F':' '{print $5}' | head -1)
}

battery_info () {
ACPI_BATTERY_DIR=/sys/class/power_supply/BAT0
if [[ -f $ACPI_BATTERY_DIR/capacity ]];
then
BATTERY_CAPACITY="$(cat $ACPI_BATTERY_DIR/capacity)%"
else
BATTERY_CAPACITY="No Battery"
fi
}

cpu_info () {
CPU_MODEL=$(awk -F ': | @' '/model name|Processor|^cpu model|chip type|^cpu type/ {printf $2; exit}' /proc/cpuinfo | awk {'print $1FS$2FS$3'})
CPU_SPEED=$(awk -F ': | @' '/model name|Processor|^cpu model|chip type|^cpu type/ {printf $3; exit}' /proc/cpuinfo)
CPUTIME=$(ps -eo pcpu | awk 'NR>1' | awk '{tot=tot+$1} END {print tot}')
CPUCORES=$(cat /proc/cpuinfo | grep -c processor)
CPU_USED=$(echo $CPUTIME / $CPUCORES | bc)%
CPU_LOAD=$(cat /proc/loadavg | cut -d' ' -f1-3)
CPU_VAMPIRE=$()
CPU_VAMPIRE_USAGE=$(ps --no-header -e -o pcpu,args --sort -pcpu | sed '/^ 0.0 /d' | head -1 | awk {'print $1'} | cut -d . -f1)%
}

gpu_info () {
GPU_NAME=$(/usr/sbin/lspci -mm | awk -F '\\"|\\" \\"' '/"Display|"3D|"VGA/ {print $3 " "}')
GPU_DRIVER=$(/usr/bin/journalctl -b -o cat | grep -i '\[drm\] Initialized' | grep -i minor | sed 's:\[drm\] Initialized::g' | awk {'print $1'})
}

hard_disks_info () {
# Disks
DISKS_INSTALLED=$(grep sd /proc/diskstats | awk {'print $3'} | cut -c2,1,3 | sort -u | wc -l)

# Disk 1
# ------
DISK1_LOGICAL_NAME=/dev/sda
DISK1_MODEL=$(/usr/sbin/parted -l | grep -B1 $DISK1_LOGICAL_NAME | grep -i Model | sed 's/Model: //' | sed 's/ATA //g' | sed 's/ (scsi)//g')
DISK1_SIZE=$(/usr/sbin/parted -l | grep -B1 $DISK1_LOGICAL_NAME | grep $DISK1_LOGICAL_NAME | awk {'print $3'})
DISK1_AVAIL_ROOT=$(df -h / | awk '{ a = $4 } END { print a }')
DISK1_TEMP=$(/usr/sbin/hddtemp $DISK1_LOGICAL_NAME | cut -d : -f3 | sed 's: ::g')
# Disk 1 type
if [[ -e /sys/block/sda/queue/rotational ]];
then
DISK1_ROTATION=$(cat /sys/block/sda/queue/rotational)
#
# Disk 1
[[ "$DISK1_ROTATION" = "0" ]] && DISK1_TYPE=SSD
[[ "$DISK1_ROTATION" = "1" ]] && DISK1_TYPE=HDD
fi

# Disk 2
# ------
DISK2_LOGICAL_NAME=/dev/sdb
if [[ -b $DISK2_LOGICAL_NAME ]];
then
DISK2_MODEL=$(/usr/sbin/parted -l | grep -B1 $DISK2_LOGICAL_NAME | grep -i Model | sed 's/Model: //' | sed 's/ATA //g' | sed 's/ (scsi)//g')
DISK2_SIZE=$(/usr/sbin/parted -l | grep -B1 $DISK2_LOGICAL_NAME | grep $DISK2_LOGICAL_NAME | awk {'print $3'})
DISK2_MNT_POINT=$(df -h ${DISK2_LOGICAL_NAME}1 | awk {'print $6'} | tail -1)
DISK2_AVAIL=$(df -h $DISK2_MNT_POINT | awk '{ a = $4 } END { print a }')
DISK2_TEMP=$(/usr/sbin/hddtemp $DISK2_LOGICAL_NAME | cut -d : -f3 | sed 's: ::g')
# Disk 2 type
if [[ -e /sys/block/sdb/queue/rotational ]];
then
DISK2_ROTATION=$(cat /sys/block/sdb/queue/rotational)
#
[[ "$DISK2_ROTATION" = "0" ]] && DISK2_TYPE=SSD
[[ "$DISK2_ROTATION" = "1" ]] && DISK2_TYPE=HDD
fi

fi
}

memory_info () {
MEMORY_SIZE_TOTAL=$(expr $(grep -i 'MemTotal' /proc/meminfo | awk {'print $2'}) / 1048576 | xargs printf '%.1f')GB
# Memory Model
MEMORY_VENDOR_0=$(/usr/sbin/dmidecode -t memory | grep -i Manufacturer | head -1 | awk {'print $2'} | sed 's/A0_Manufacturer0//')
MEMORY_PART_NO_0=$(/usr/sbin/dmidecode -t memory | grep -i 'Part Number' | head -1 | awk {'print $3'} | sed 's/Array1_PartNumber1//g')
MEMORY_CLOCK_SPEED_0=$(/usr/sbin/dmidecode -t memory | grep -i 'Configured Clock Speed' | head -1 | awk {'print $4 $5'})
MEMORY_VENDOR_1=$(/usr/sbin/dmidecode -t memory | grep -i Manufacturer | tail -1 | awk {'print $2'} | sed 's/A1_Manufacturer1//')
MEMORY_PART_NO_1=$(/usr/sbin/dmidecode -t memory | grep -i 'Part Number' | tail -1 | awk {'print $3'} | sed 's/Array1_PartNumber1//g')
MEMORY_CLOCK_SPEED_1=$(/usr/sbin/dmidecode -t memory | grep -i 'Configured Clock Speed' | tail -1 | awk {'print $4 $5'})
MEMORY_MODEL_B0=$(echo "$MEMORY_VENDOR_0 $MEMORY_PART_NO_0" | cut -c1-20 | sed "s:-$::")
MEMORY_MODEL_B1=$(echo "$MEMORY_VENDOR_1 $MEMORY_PART_NO_1" | cut -c1-20 | sed "s:-$::")
# Memory Size
[[ "$(/usr/sbin/dmidecode -t memory | grep -i 'Size' | head -1 | awk {'print $2'})" = "No" ]] || \
MEMORY_SIZE_B0=$(expr $(/usr/sbin/dmidecode -t memory | grep -i 'Size' | head -1 | awk {'print $2'}) / 1024 | xargs printf '%.0f')GB
[[ "$(/usr/sbin/dmidecode -t memory | grep -i 'Size' | tail -1 | awk {'print $2'})" = "No" ]] || \
MEMORY_SIZE_B1=$(expr $(/usr/sbin/dmidecode -t memory | grep -i 'Size' | tail -1 | awk {'print $2'}) / 1024 | xargs printf '%.0f')GB
# Memory available
MEMORY_AVAIL=$(free -m | grep Mem: | awk {'print $4'})
}

x11_info () {
ps acxw | grep X > /dev/null 2>&1
X11_IS_RUNNING=$?
# Get screen resolution if X server is running
if [[ "$X11_IS_RUNNING" = "0" ]];
then
SCREEN_RESOLUTION=$(export DISPLAY=:0.0 && /usr/bin/xrandr --nograb --current | awk 'match($0,/[0-9]*\.[0-9]*\*/) {printf $1 " "}')
else
SCREEN_RESOLUTION="${RED}No Xserver found${RST}"
fi
}

print_system_info () {
# Set font and colors
set_fonts_colors

# Top Border
#echo -e "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#"
# Print our logo
cat -T <<EOT

             _     _ _   
 _   _  __ _| |___(_) |_ 
| | | |/ _\` | / __| | __|
| |_| | (_| | \__ \ | |_ 
 \__, |\__,_|_|___/_|\__|
 |___/                   

by Joseph Zikusooka


EOT

# Summary
cat <<SUMMARY
		Internet Status:	${BOLD} $INTERNET_STATE ${RST}
		Current WiFi:		${BOLD} $WIFI_CONNECTION_STATUS ${RST}
		Battery Level:		${BOLD} ${BATTERY_CAPACITY} ${RST}
		Current Location:	${BOLD} $GEOLOCATION ${RST}
		Linux Kernel:		${BOLD} $LINUX_KERNEL_VERSION
		Model Number:		${BOLD} $PRODUCT_MODEL_NUMBER ${RST}
		Serial Number:		${BOLD} $PRODUCT_SERIAL_NUMBER ${RST}
		Install Date:		${BOLD} $INSTALL_DATE ${RST}
		Owner:			${BOLD} $CONTACT_NAME ${RST}

SUMMARY

# Date
echo -e "${RST}Date:${BOLD} $(date +'%A, %d %b %Y') \t\t ${RST}Time:${BOLD} $(uptime | awk {'print $1FS$2FS$3'} | sed 's/,//')" 
# IP Addresses
echo -e "${RST}Private IP:${BOLD} $NETWORK_IP_ADDRESS \t\t ${RST}Public IP:${BOLD} $PUBLIC_IP_ADDRESS"
# Gateway
if [ "x$NETWORK_GATEWAY_ADDRESS" = "x" ];
then
NETWORK_GATEWAY_ADDRESS=000.000.000.000
fi
echo -e "${RST}Private IP Gateway:${BOLD} $NETWORK_GATEWAY_ADDRESS \t ${RST}DNS Address:${BOLD} $CURRENT_DNS1"

# WiFi AP and Client Chipsets
echo -e "${RST}WiFi AP:${BOLD} $WIFI_AP_CHIPSET \t\t ${RST}WiFi Client:${BOLD} $WIFI_CLIENT_CHIPSET"

# CPU
echo -e "${RST}CPU Model:${BOLD} $CPU_MODEL \t ${RST}CPU Speed:${BOLD} $CPU_SPEED"
echo -e "${RST}CPU Usage:${BOLD} $CPU_USED \t\t\t\t ${RST}CPU used:${BOLD} $CPU_VAMPIRE_USAGE"

# Graphics
echo -e "${RST}GPU Name:${BOLD} $GPU_NAME \t\t ${RST}GPU Driver:${BOLD} $GPU_DRIVER"

# Memory
if [[ "x$MEMORY_SIZE_B0" = "x" ]];
then
echo -e "${RST}Memory Size:${BOLD} $MEMORY_SIZE_TOTAL \t\t\t ${RST}Bank 0:${BOLD}"
else
echo -e "${RST}Memory Size:${BOLD} $MEMORY_SIZE_TOTAL \t\t\t ${RST}Bank 0:${BOLD} $MEMORY_SIZE_B0"
fi

if [[ "x$MEMORY_SIZE_B1" = "x" ]];
then
echo -e "${RST}Available Memory:${BOLD} $MEMORY_AVAIL MB \t\t ${RST}Bank 1:${BOLD}"
else
echo -e "${RST}Available Memory:${BOLD} $MEMORY_AVAIL MB \t\t ${RST}Bank 1:${BOLD} $MEMORY_MODEL_B1"
fi

# Disks
# -----
# Number of disks installed and space left for root partition
echo -e "${RST}Disks installed:${BOLD} $DISKS_INSTALLED \t\t\t ${RST}Space Left: ${BOLD}$DISK1_AVAIL_ROOT"

# Disk Model & Size
echo -e "${RST}Disk 1 Model:${BOLD} $DISK1_MODEL ($DISK1_TYPE) \t ${RST}Disk 1 Size:${BOLD} $DISK1_SIZE"
[[ "$DISKS_INSTALLED" -gt "1" ]] && \
echo -e "${RST}Disk 2 Model:${BOLD} $DISK2_MODEL ($DISK2_TYPE) \t ${RST}Disk 2 Size:${BOLD} $DISK2_SIZE"

# Disk Temperature(s)
if [[ "$DISKS_INSTALLED" -gt "1" ]];
then
echo -e "${RST}Disk Temperatures:${BOLD} $DISK1_TEMP | $DISK2_TEMP \t\t ${RST}Resolution:${BOLD} $SCREEN_RESOLUTION"
else
echo -e "${RST}Disk Temperature:${BOLD} $DISK1_TEMP \t\t\t ${RST}Resolution:${BOLD} $SCREEN_RESOLUTION"
fi

echo -e "\e[0m"

#fortune -s
#echo -e ""

# Bottom Border
#echo -e "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#"
}



#################
#  MAIN SCRIPT  #
#################

# Print notice
notice_gathering_info

# If Internet connection is up, fetch online based information
internet_service_checks

# Wired network
wired_network

# WiFi Chipsets
wifi_hardware

# WiFi state
wifi_status

# Geolocation
get_geolocation

# Install Date
install_setup_info

# Battery info
battery_info

# CPU info
cpu_info

# GPU info
gpu_info

# Hard Disk info
hard_disks_info > /dev/null 2>&1

# Memory Info
memory_info 

# X11 Info
x11_info

# Print system information
# -------------------------
print_system_info | more
